{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"api = getApi()","pinCode":false,"dname":"ff38059a-f071-43e2-aada-71b02cf3b5e5","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"data = Object()","pinCode":false,"dname":"06a2c045-49aa-403a-9c6d-3b8889fa88d1","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"md`# Graph Management`","pinCode":false,"dname":"9c14e294-d770-40c0-94bc-ce5dda96f3ac","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Grove.Div({\n  \tclassName: \"container\",\n\tchildren: [\n    \tGrove.Div({\n          className: \"row\",\n          children: [\n          \tGrove.Div({\n              className: \"col text-center\",\n              children: [clearGraphBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\",\n              children: [loadGraphBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\",\n              children: [loadRoadBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\",\n              children: []\t\n            }),\n            Grove.Div({\n              className: \"col text-center\",\n              children: []\t\n            })\n          ]\n        })\n    ]\n})","pinCode":false,"dname":"c5918f6c-7149-4a25-8047-bcb62c78ea53","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Grove.Div({\n  \tclassName: \"container\",\n\tchildren: [\n    \tGrove.Div({\n          className: \"row\",\n          children: [\n          \tGrove.Div({\n              className: \"col text-center\",\n              children: [loadJunctionsBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\",\n              children: [loadSegmentsBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\",\n              children: [loadCrimesBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\",\n              children: [loadTransitBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\",\n              children: []\t\n            })\n          ]\n        })\n    ]\n})","pinCode":false,"dname":"633b7308-246a-4eca-bee3-dee7d028b79a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Grove.Div({\n  \tclassName: \"container\",\n\tchildren: [\n    \tGrove.Div({\n          className: \"row\",\n          children: [\n          \tGrove.Div({\n              className: \"col text-center\",\n              children: [selectJunctionsBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\",\n              children: [selectSegmentsBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\",\n              children: [selectCrimesBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\",\n              children: [selectTransitBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\",\n              children: [clearSelectionBtn]\t\n            })\n          ]\n        })\n    ]\n})","pinCode":false,"dname":"761b26cf-3ad2-4583-a1e5-06bf2882eba5","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Grove.Div({\n  \tclassName: \"container\",\n\tchildren: [\n    \tGrove.Div({\n          className: \"row\",\n          children: [\n          \tGrove.Div({\n              className: \"col text-center\",\n              children: [expandCrimeBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\",\n              children: [expandTransitBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\",\n              children: [expandNetworkBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\",\n              children: []\t\n            }),\n            Grove.Div({\n              className: \"col text-center\",\n              children: []\t\n            })\n          ]\n        })\n    ]\n})","pinCode":false,"dname":"3280358c-b05a-4c8a-ad63-6d365a59ddef","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Grove.Div({\n  \tclassName: \"container\",\n\tchildren: [\n    \tGrove.Div({\n          className: \"row\",\n          children: [\n          \tGrove.Div({\n              className: \"col text-center\",\n              children: [toggleMapBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\",\n              children: [loadSelectedRegionBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\", \n              children: [removeSelectedRegionBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\", \n              children: [clearRegionBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\", \n              children: []\t\n            })\n          ]\n        })\n    ]\n})","pinCode":false,"dname":"379fe9f7-8771-4090-be4c-a214bd9da503","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  const vancouver_pos = [49.25, -123];\n  const container = yield htl.html`<div style=\"height: 600px;\">`;\n  const map = L.map(container).setView(vancouver_pos, 12);\n  L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n    attribution: \"Â© <a href=https://www.openstreetmap.org/copyright>OpenStreetMap</a> contributors\"\n  }).addTo(map);\n  \n  let positions = {lat1: 0, lng1: 0, lat2: 0, lng2: 0};\n  data.positions = positions;\n  data.map_container = container;\n  data.map = map;\n  data.selectedNodesLayer = L.layerGroup().addTo(map);\n  \n  let marker1 = L.marker();\n  let marker2 = L.marker();\n  let polygon = L.polygon([]);\n  \n  function onMapClick(e) {\n    let first = !e.originalEvent.shiftKey;\n    if (first) {\n      positions.lat1 = e.latlng.lat;\n      positions.lng1 = e.latlng.lng;\n      marker1.setLatLng(e.latlng).addTo(map);\n      \n      if(positions.lat2 == 0 && positions.lng2 == 0) {\n       \tpositions.lat2 = positions.lat1;\n        positions.lng2 = positions.lng1;\n      }\n    } else {\n      positions.lat2 = e.latlng.lat;\n      positions.lng2 = e.latlng.lng;\n      marker2.setLatLng(e.latlng).addTo(map);\n      \n      if(positions.lat1 == 0 && positions.lng1 == 0) {\n       \tpositions.lat1 = positions.lat2;\n        positions.lng1 = positions.lng2;\n      }\n    }\n    \n    let latlngs = [\n      [positions.lat1, positions.lng1], \n      [positions.lat1, positions.lng2],\n      [positions.lat2, positions.lng2],\n      [positions.lat2, positions.lng1]\n    ];\n    polygon.setLatLngs(latlngs).addTo(map);\n  }\n  \n  function clearSelection() {\n    positions.lat1 = 0;\n    positions.lat2 = 0;\n    positions.lng1 = 0;\n    positions.lng2 = 0;\n    \n    marker1.remove();\n    marker2.remove();\n    polygon.remove();\n  }\n  \n  data.clearSelection = clearSelection;\n  \n  let icons = {\n    default: L.divIcon({className: 'selectedNode'}),\n    Junction: L.divIcon({className: 'selectedNode selectedJunction'}),\n    Segment: L.divIcon({className: 'selectedNode selectedSegment'}),\n    Crime: L.divIcon({className: 'selectedNode selectedCrime'}),\n    Transit: L.divIcon({className: 'selectedNode selectedTransit'})\n  }\n  \n  async function updateSelectedDisplay() {\n    let graph = api.getLayoutGraph();\n    let selectedNodes = graph.getVisibleNodes().filter(n=>graph.getNodeStyles(n.id).selected);\n    data.selectedNodesLayer.clearLayers();\n    \n    selectedNodes.forEach((node) => {\n      let lat = node.properties.latitude;\n      let lng = node.properties.longitude;\n      \n      let icon = icons.default;\n      if (node.category in icons)\n        icon = icons[node.category]\n      \n      data.selectedNodesLayer.addLayer(L.marker([lat, lng], {icon: icon}));\n    })\n  }\n  data.updateSelectedDisplay = updateSelectedDisplay;\n  api.observe(\"select\", updateSelectedDisplay);\n  \n  map.on('click', onMapClick);\n}","pinCode":false,"dname":"84ffcb83-0582-41ce-b816-d108c4669eff","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"<style>\n  .customBtn { \n    width: 200px;\n    height: 70px;\n  }\n  \n  .selectedNode {\n    background-color: black;\n    border-style: solid;\n    border-color: black;\n    border-width: 2px;\n    padding: 5px;\n    border-radius: 100px;\n  }\n  \n  .selectedJunction {\n    background-color: orange;\n  }\n  \n  .selectedSegment {\n   \t background-color: grey;\n  }\n  \n  .selectedCrime {\n   \t background-color: red;\n  }\n  \n  .selectedTransit {\n   \t background-color: blue;\n  }\n</style>","pinCode":false,"dname":"3f960e4d-d91e-4b04-995b-d89de528af3f","codeMode":"htmlmixed","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"clearGraphBtn = Grove.Button({\n  label: \"Clear Graph\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => {\n    api.getLayoutGraph().clear();\n    data.updateSelectedDisplay();\n  }\n})","pinCode":false,"dname":"7f29cf1e-06bd-4d99-814d-43c2d99ec9ec","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"loadGraphBtn = Grove.Button({\n  label: \"Load Entire Graph\",\n  className: \"btn-warning btn-lg customBtn\",\n  onClick: () => {\n    api.neo4j(\n      `MATCH (n) RETURN *`\n    )\n  }\n})","pinCode":false,"dname":"e38823b1-8108-4fc4-87cc-61a93d07bb83","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"loadRoadBtn = Grove.Button({\n  label: \"Load Entire Road Network\",\n  className: \"btn-warning btn-lg customBtn\",\n  onClick: () => {\n    api.neo4j(\n      `MATCH (s:Segment)-[c:CONTINUES_TO]->(j:Junction) RETURN *`\n    )\n  }\n})","pinCode":false,"dname":"e6f009b6-4357-40e9-b8d9-2b125c5f4cf7","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"toggleMapBtn = Grove.Button({\n  label: \"Toggle Map\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => {\n    if (data.map_container.style.display == \"none\") {\n      data.map_container.style.display = \"\";\n    } else {\n      data.map_container.style.display = \"none\"; \n    }\n  }\n})","pinCode":false,"dname":"bb5345df-6f70-4c5b-8b77-d9213288b6b4","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"removeSelectedRegionBtn = Grove.Button({\n  label: \"Remove Selected Region\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => {\n  \tlet lat1 = 0, lat2 = 0, lng1 = 0, lng2 = 0;\n    [lat1, lat2] = [data.positions.lat1, data.positions.lat2].sort((a, b) => a-b);\n    [lng1, lng2] = [data.positions.lng1, data.positions.lng2].sort((a, b) => a-b);\n    \n    let graph = api.getLayoutGraph();\n    graph.applyTransform((graph) => {\n      graph.removeNodes(\n      \tgraph.getNodes().filter((node) => {\n          let latidude = node.properties.latitude;\n          let longitude = node.properties.longitude;\n          return latidude >= lat1 && latidude <= lat2 &&\n            \t longitude >= lng1 && longitude <= lng2;\n        }).map((node) => node.id)\n      );\n    });\n  }\n})","pinCode":false,"dname":"5f33b7e4-0a17-4d8c-b617-46a278c8e07c","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"loadSelectedRegionBtn = Grove.AsyncButton({\n  label: \"Load Selected Region\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => loadNodes(\"(s:Segment)-[c:CONTINUES_TO]->(j:Junction)\", \"j\")\n})","pinCode":false,"dname":"fa8aeedf-ebe5-4fb3-be6d-28f1cec2f618","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"loadJunctionsBtn = Grove.Button({\n  label: \"Load Junctions\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => loadNodes(\"(j:Junction)\", \"j\") \n})","pinCode":false,"dname":"9b681238-fa3f-4d4d-9ac8-742bd9d81528","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"loadSegmentsBtn = Grove.Button({\n  label: \"Load Segments\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => loadNodes(\"(s:Segment)\", \"s\") \n})","pinCode":false,"dname":"fd110956-7555-4d01-aabb-51859e0d6877","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"clearRegionBtn = Grove.Button({\n  label: \"Clear Region Selection\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => data.clearSelection()\n})","pinCode":false,"dname":"cbe53b7a-68a8-418f-b647-48264c898b20","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"loadCrimesBtn = Grove.Button({\n  label: \"Load Crimes\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => loadNodes(\"(c:Crime)\", \"c\") \n})","pinCode":false,"dname":"c5c8a55e-563e-46eb-87d1-fde0d738bfb0","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"loadTransitBtn = Grove.Button({\n  label: \"Load Transit\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => loadNodes(\"(t:Transit)\", \"t\") \n})","pinCode":false,"dname":"d9567502-c13a-4ade-9261-57c3ae10d675","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"expandCrimeBtn = Grove.Button({\n  label: \"Expand To Crime Nodes\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => {\n    let graph = api.getLayoutGraph();\n  \tlet nodes = graph.getVisibleNodes().filter(api.nodesByCategory(\"Junction\")).filter(n=>graph.getNodeStyles(n.id).selected);\n    if (nodes.length == 0) nodes = graph.getVisibleNodes().filter(api.nodesByCategory(\"Junction\"));\n    let ids = nodes.map((node) => (node.properties.id));\n    \n    let query = `\n    \tMATCH (c:Crime)-[n:NEAREST_CRIME_JN]->(j:Junction)\n        WHERE j.id IN [${ids}]\n        RETURN *\n    `\n    \n    api.neo4j(query);\n  }\n})","pinCode":false,"dname":"fc64d209-82fa-4e98-bf60-9041803f7aab","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"expandTransitBtn = Grove.Button({\n  label: \"Expand To Transit Nodes\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => {\n    let graph = api.getLayoutGraph();\n  \tlet nodes = graph.getVisibleNodes().filter(api.nodesByCategory(\"Segment\")).filter(n=>graph.getNodeStyles(n.id).selected);\n    if (nodes.length == 0) nodes = graph.getVisibleNodes().filter(api.nodesByCategory(\"Segment\"));\n    let ids = nodes.map((node) => (node.properties.id));\n    \n    let query = `\n    \tMATCH (t:Transit)-[n:PRESENT_IN]->(s:Segment)\n        WHERE s.id IN [${ids}]\n        RETURN *\n    `\n    \n    api.neo4j(query);\n  }\n})","pinCode":false,"dname":"a7b2e980-b7db-43d7-a344-f1e6a4bcb52a","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"expandNetworkBtn = Grove.Button({\n  label: \"Expand Network\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => {\n  \tlet graph = api.getLayoutGraph();\n    let segments = graph.getVisibleNodes().filter(api.nodesByCategory(\"Segment\"));\n    let junctions = graph.getVisibleNodes().filter(api.nodesByCategory(\"Junction\"));\n    let selectedSegments = segments.filter(n=>graph.getNodeStyles(n.id).selected);\n    let selectedJunctions = junctions.filter(n=>graph.getNodeStyles(n.id).selected);\n    \n    let useAll = selectedSegments.length == 0 && selectedJunctions.length == 0;\n    let workingSegments = useAll ? segments : selectedSegments;\n    let workingJunctions = useAll ? junctions : selectedJunctions;\n    \n    let segmentIds = workingSegments.map((segment) => (segment.properties.id));\n    let junctionIds = workingJunctions.map((junction) => (junction.properties.id));\n    \n    let query = `\n    \tMATCH (s:Segment)-[c:CONTINUES_TO]->(j:Junction)\n        WHERE (s.id IN [${segmentIds}]) OR \n        \t  (j.id IN [${junctionIds}])\n        RETURN *\n    `\n    \n    api.neo4j(query);\n  }\n})","pinCode":false,"dname":"fd87029e-9938-406f-9e4c-ec9159ac5daa","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"clearSelectionBtn = Grove.Button({\n  label: \"Unselect All\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => {\n    let graph = api.getLayoutGraph();\n    graph.applyTransform((graph) => {\n    \tlet selectedNodes = graph.getVisibleNodes().filter(n=>graph.getNodeStyles(n.id).selected);\n    \tselectedNodes.forEach((node) => node.setStyle(\"selected\", false));\n    });\n   \tdata.updateSelectedDisplay();\n  }\n})","pinCode":false,"dname":"1631dd12-2760-4196-9ac9-9fb346396eb3","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"selectCategory = function(category) {\n  let graph = api.getLayoutGraph();\n    graph.applyTransform((graph) => {\n    \tlet nodesToSelect = graph.getVisibleNodes().filter(api.nodesByCategory(category));\n    \tnodesToSelect.forEach((node) => node.setStyle(\"selected\", true));\n    });\n   \tdata.updateSelectedDisplay();\n}","pinCode":false,"dname":"2d897439-ca93-4eea-b1bd-c1ddd2d99415","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"selectJunctionsBtn = Grove.Button({\n  label: \"Select Junctions\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => selectCategory(\"Junction\")\n})","pinCode":false,"dname":"304bc94f-f506-44a8-903c-35fd88f16436","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"selectSegmentsBtn = Grove.Button({\n  label: \"Select Segments\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => selectCategory(\"Segment\")\n})","pinCode":false,"dname":"6098f8bb-32ce-4591-bbed-43e545019f3c","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"selectCrimesBtn = Grove.Button({\n  label: \"Select Crimes\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => selectCategory(\"Crime\")\n})","pinCode":false,"dname":"bd0d7581-3af8-4691-bcbf-678b4e7e2c68","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"selectTransitBtn = Grove.Button({\n  label: \"Select Transit\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => selectCategory(\"Transit\")\n})","pinCode":false,"dname":"2cfc781e-2265-43ab-93a0-3a3141048205","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"function generateLocationWhere(nodeName) {\n  let lat1 = 0, lat2 = 0, lng1 = 0, lng2 = 0;\n  [lat1, lat2] = [data.positions.lat1, data.positions.lat2].sort((a, b) => a-b);\n  [lng1, lng2] = [data.positions.lng1, data.positions.lng2].sort((a, b) => a-b);\n  \n  return `\n  \t${nodeName}.latitude >= ${lat1} AND ${nodeName}.latitude <= ${lat2} AND\n    ${nodeName}.longitude >= ${lng1} AND ${nodeName}.longitude <= ${lng2}\n  `\n}","pinCode":false,"dname":"83a4c4bb-69f5-4d3a-9f11-cc0d551e3bdc","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"isRegionSelected = () => data.positions.lat1 != data.positions.lat2 || data.positions.lng1 != data.positions.lng2","pinCode":false,"dname":"e457e116-77d8-45f9-bae8-a13505e58d2c","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"function loadNodes(match, longitude_limiter) {\n  let where = isRegionSelected() ? `WHERE ${generateLocationWhere(longitude_limiter)}` : ''\n    \n  let query = `\n      MATCH ${match}\n      ${where}\n      RETURN * \n    `;\n\n  api.neo4j(query);\n}","pinCode":false,"dname":"f375d578-4f0e-4c52-8e9d-983857b5cb70","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"Grove.Button({\n  label: \"Make APIs Visible\",\n  onClick: () => {\n    window.Grove = Grove;\n    window.api = api;\n  }\n})","pinCode":false,"dname":"5c3918b8-f6b0-4c1d-83eb-14044647c032","codeMode":"javascript2","hide":true}}}],"version":"2.19.1"}