{"blocks":[{"type":"codeTool","data":{"codeData":{"value":"api = getApi()","pinCode":false,"dname":"ff38059a-f071-43e2-aada-71b02cf3b5e5","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"data = Object()","pinCode":false,"dname":"06a2c045-49aa-403a-9c6d-3b8889fa88d1","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"categories = {yield {\n  \tJunction: \"orange\",\n    Segment: \"grey\",\n    Crime: \"red\",\n    Transit: \"blue\",\n    RapidTransit: \"blue\",\n    Store: \"green\",\n    School: \"purple\"\n}}","pinCode":false,"dname":"4efea740-7315-4e9d-b82b-402c74f9717d","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"md`# Graph Management`","pinCode":false,"dname":"9c14e294-d770-40c0-94bc-ce5dda96f3ac","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Grove.Div({\n  \tclassName: \"container\",\n\tchildren: [\n    \tGrove.Div({\n          className: \"row\",\n          children: [\n          \tGrove.Div({\n              className: \"col text-center\",\n              children: [select]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\",\n              children: [loadSelectedCategoryBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\",\n              children: [removeCategoryBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\",\n              children: [selectCategoryBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\",\n              children: [unselectCategoryBtn]\t\n            })\n          ]\n        })\n    ]\n})","pinCode":false,"dname":"50198a58-10cf-4874-88a9-bed260b89e18","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Grove.Div({\n  \tclassName: \"container\",\n\tchildren: [\n    \tGrove.Div({\n          className: \"row\",\n          children: [\n          \tGrove.Div({\n              className: \"col text-center\",\n              children: [loadAllBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\",\n              children: [removeAllBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\",\n              children: [selectAllBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\",\n              children: [unselectAllBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\",\n              children: [deleteSelectionBtn]\t\n            })\n          ]\n        })\n    ]\n})","pinCode":false,"dname":"633b7308-246a-4eca-bee3-dee7d028b79a","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"Grove.Div({\n  \tclassName: \"container\",\n\tchildren: [\n    \tGrove.Div({\n          className: \"row\",\n          children: [\n          \tGrove.Div({\n              className: \"col text-center\",\n              children: [toggleMapBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\",\n              children: [clearRegionBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\", \n              children: [toggleShowSelectedBtn]\t\n            }),\n            Grove.Div({\n              className: \"col text-center\", \n              children: []\t\n            }),\n            Grove.Div({\n              className: \"col text-center\", \n              children: [clearGraphBtn]\t\n            })\n          ]\n        })\n    ]\n})","pinCode":false,"dname":"379fe9f7-8771-4090-be4c-a214bd9da503","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"","pinCode":false,"dname":"180b7906-cfdc-42a9-b079-016420145702","codeMode":"htmlmixed"}}},{"type":"codeTool","data":{"codeData":{"value":"{\n  // Create the container for the map\n  const container = data.map_container = yield htl.html`<div style=\"height: 600px;\">`;\n  \n  const vancouver_pos = [49.25, -123];\n  \n  // Create the map\n  const map = data.map = L.map(container).setView(vancouver_pos, 12);\n  L.tileLayer(\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n    attribution: \"Â© <a href=https://www.openstreetmap.org/copyright>OpenStreetMap</a> contributors\"\n  }).addTo(map);\n  \n  // Create a layer to display selected nodes on\n  let selectedNodesLayer = data.selectedNodesLayer = L.layerGroup().addTo(map);\n  \n  // Initialize the corners of the region\n  let positions = data.positions = {lat1: 0, lng1: 0, lat2: 0, lng2: 0};\n  \n  // Create the markers for showing the region\n  let marker1 = L.marker({interactive: false});\n  let marker2 = L.marker({interactive: false});\n  let polygon = L.polygon([], {interactive: false});\n  \n  // Handle clicks on the map\n  //\n  // Update the corners of the region selection\n  function onMapClick(e) {\n    // Determine which corner should be changed\n    let first = !e.originalEvent.shiftKey;\n    if (first) {\n      // Update the position of the first corner\n      ({ lat: positions.lat1, lng: positions.lng1 } = e.latlng);\n      marker1.setLatLng(e.latlng).addTo(map);\n      \n      // If the second corner hasn't been set then update it so that no region shows\n      if(!map.hasLayer(marker2)) {\n       \t({ lat: positions.lat2, lng: positions.lng2 } = e.latlng);\n      }\n    } else {\n      // Update the positions of the second corner\n      ({ lat: positions.lat2, lng: positions.lng2 } = e.latlng);\n      marker2.setLatLng(e.latlng).addTo(map);\n      \n      // If the first corner hasn't been set then update it so that no region shows\n      if(!map.hasLayer(marker1)) {\n       \t({ lat: positions.lat1, lng: positions.lng1 } = e.latlng);\n      }\n    }\n    \n    // Update the region display\n    let corners = [\n      [positions.lat1, positions.lng1], \n      [positions.lat1, positions.lng2],\n      [positions.lat2, positions.lng2],\n      [positions.lat2, positions.lng1]\n    ];\n    polygon.setLatLngs(corners).addTo(map);\n  }\n  map.on('click', onMapClick);\n  \n  // Reset the region selection to an empty selection\n  function clearSelection() {\n    // Reset all positions\n    positions.lat1 = 0;\n    positions.lat2 = 0;\n    positions.lng1 = 0;\n    positions.lng2 = 0;\n    \n    // Remove the displays from the map\n    marker1.remove();\n    marker2.remove();\n    polygon.remove();\n  }\n  data.clearSelection = clearSelection;\n  \n  data.showSelected = true;\n  \n  // Show the selected nodes on the map if data.showSelected is true\n  async function updateSelectedDisplay() {\n    // Remove any previous markers\n    data.selectedNodesLayer.clearLayers();\n    \n    if (!data.showSelected) return;\n    \n    let graph = api.getLayoutGraph();\n    let selectedNodes = graph.getVisibleNodes().filter(filterBySelection());\n    \n    // Create a marker for each node\n    selectedNodes.forEach((node) => {\n      let lat = node.properties.latitude;\n      let lng = node.properties.longitude;\n      \n      // Determine the color for the marker\n      let color =  \"black\"\n      if (node.category in categories)\n        color = categories[node.category]\n      \n      // Create the marker\n      data.selectedNodesLayer.addLayer(L.circleMarker([lat, lng], {color: color, fillOpacity: 0.8, radius: 5}));\n    })\n  }\n  data.updateSelectedDisplay = updateSelectedDisplay;\n  api.observe(\"select\", updateSelectedDisplay);\n}","pinCode":false,"dname":"84ffcb83-0582-41ce-b816-d108c4669eff","codeMode":"javascript2"}}},{"type":"codeTool","data":{"codeData":{"value":"<style>\n  .customBtn { \n    width: 200px;\n    height: 70px;\n  }\n</style>","pinCode":false,"dname":"3f960e4d-d91e-4b04-995b-d89de528af3f","codeMode":"htmlmixed","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"// Removes all nodes when clicked\nclearGraphBtn = Grove.Button({\n  label: \"Clear Graph\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => {\n    api.getLayoutGraph().clear();\n    data.updateSelectedDisplay();\n  }\n})","pinCode":false,"dname":"7f29cf1e-06bd-4d99-814d-43c2d99ec9ec","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"// Shows and hides the map display when clicked\ntoggleMapBtn = Grove.Button({\n  label: \"Toggle Map\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => {\n    let mapStyle = data.map_container.style;\n    mapStyle.display = mapStyle.display == \"\" ? \"none\" : \"\" ;\n  }\n})","pinCode":false,"dname":"bb5345df-6f70-4c5b-8b77-d9213288b6b4","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"// Load all nodes in the selected region\nloadAllBtn = Grove.AsyncButton({\n  label: \"Load All\",\n  className: \"btn-warning btn-lg customBtn\",\n  onClick: () => loadNodes(`(n)`, \"n\") \n})","pinCode":false,"dname":"fa8aeedf-ebe5-4fb3-be6d-28f1cec2f618","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"// Removes all nodes in the selected region when clicked \nremoveAllBtn = Grove.Button({\n  label: \"Remove All\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => {\n    // Remove nodes in the region\n    api.getLayoutGraph().applyTransform((graph) => graph.removeNodes(\n      graph.getVisibleNodes().filter(filterByRegion()).map((node) => node.id)\n    ));\n    \n    // Update the display\n    data.updateSelectedDisplay();\n  }\n})","pinCode":false,"dname":"5f33b7e4-0a17-4d8c-b617-46a278c8e07c","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"loadSelectedCategoryBtn = Grove.Button({\n  label: \"Load Category\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => loadNodes(`(n:${data.select.value})`, \"n\") \n})","pinCode":false,"dname":"8e02b81f-04a9-427f-a319-d6185907a071","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"removeCategoryBtn = Grove.Button({\n  label: \"Remove Category\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => {\n    api.getLayoutGraph().applyTransform((graph) => {\n      // Select nodes that are in the region and have the category, [category]\n      graph.removeNodes(\n        graph.getVisibleNodes()\n        .filter(api.nodesByCategory(data.select.value))\n        .filter(filterByRegion())\n        .map((node) => node.id)\n      );\n    });\n    data.updateSelectedDisplay(); \n  }\n})","pinCode":false,"dname":"502addd0-562a-4dea-be76-259a34551748","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"selectCategoryBtn = Grove.Button({\n  label: \"Select Category\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => selectCategory(data.select.value)\n})","pinCode":false,"dname":"a4049b07-07a4-4ce0-b570-3f01e5099b6e","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"unselectCategoryBtn = Grove.Button ({\n  label: 'Deselect Category',\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => {\n    api.getLayoutGraph().applyTransform((graph) => {\n      // Select nodes that are in the region and have the category, [category]\n      let nodesToSelect = graph.getVisibleNodes()\n                               .filter(api.nodesByCategory(data.select.value))\n                               .filter(filterByRegion());\n      // Mark the nodes as selected\n      nodesToSelect.forEach((node) => node.setStyle(\"selected\", false));\n    });\n   \tdata.updateSelectedDisplay();\n  }\n})","pinCode":false,"dname":"da4d041a-ab0e-4cfb-9323-c4e784709e5b","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"// Remove the region selection. i.e. Make it so no region is selected\nclearRegionBtn = Grove.Button({\n  label: \"Clear Region Selection\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => data.clearSelection()\n})","pinCode":false,"dname":"cbe53b7a-68a8-418f-b647-48264c898b20","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"// Delete nodes that are selected\ndeleteSelectionBtn = Grove.Button({\n  label: \"Delete Selected Nodes\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => {\n    // Delete selected nodes\n    api.getLayoutGraph().applyTransform((graph) => graph.removeNodes(\n    \tgraph.getVisibleNodes().filter(filterBySelection()).map((node) => node.id)\n    ));\n    \n    // Update the display\n    data.updateSelectedDisplay();\n  }\n})","pinCode":false,"dname":"3f981a5b-c358-481a-995a-96a006a5261f","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"// Select all nodes in the region\nselectAllBtn = Grove.Button({\n  label: \"Select All\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => {\n    api.getLayoutGraph().applyTransform((graph) => {\n      let selectedNodes = graph.getVisibleNodes().filter(filterByRegion());\n      selectedNodes.forEach((node) => node.setStyle(\"selected\", true));\n    });\n   \tdata.updateSelectedDisplay();\n  }\n})","pinCode":false,"dname":"8e9551ee-32d6-4b4f-a09f-37398ef96601","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"// Unselect selected nodes\nunselectAllBtn = Grove.Button({\n  label: \"Deselect All\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => {\n    api.getLayoutGraph().applyTransform((graph) => {\n      let selectedNodes = graph.getVisibleNodes().filter(filterBySelection()).filter(filterByRegion());\n      selectedNodes.forEach((node) => node.setStyle(\"selected\", false));\n    });\n   \tdata.updateSelectedDisplay();\n  }\n})","pinCode":false,"dname":"1631dd12-2760-4196-9ac9-9fb346396eb3","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"// Toggle data.showSelected which controls whether selected nodes are displayed on the map\ntoggleShowSelectedBtn = data.toggleShowSelectedBtn = Grove.Button({\n  label: \"Showing Selected\",\n  className: \"btn-primary btn-lg customBtn\",\n  onClick: () => {\n    // Toggle data.showSelected\n    data.showSelected = !data.showSelected;\n    \n    // Update the button text\n    let btn = data.toggleShowSelectedBtn;\n  \tbtn.innerHTML = data.showSelected ? \"Hide Selected\" : \"Show Selected\";\n    \n    // Update the look of the button\n    if (data.showSelected) {\n      btn.classList.remove(\"btn-secondary\");\n      btn.classList.add(\"btn-primary\");\n    } else {\n      btn.classList.add(\"btn-secondary\");\n      btn.classList.remove(\"btn-primary\");\n    }\n    data.updateSelectedDisplay();\n  }\n})","pinCode":false,"dname":"3a2cc24c-7cd2-4b3d-8e67-b60c933d00a8","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"// Select nodes that are part of [category]\n//\n// If there is a region selected then only select nodes in that region.\n// otherwise select all nodes in [category]\n//\n// Parameters\n// category (string): The category to select nodes from\nselectCategory = function(category) {\n    api.getLayoutGraph().applyTransform((graph) => {\n      // Select nodes that are in the region and have the category, [category]\n      let nodesToSelect = graph.getVisibleNodes()\n                               .filter(api.nodesByCategory(category))\n                               .filter(filterByRegion());\n      // Mark the nodes as selected\n      nodesToSelect.forEach((node) => node.setStyle(\"selected\", true));\n    });\n   \tdata.updateSelectedDisplay();\n}","pinCode":false,"dname":"2d897439-ca93-4eea-b1bd-c1ddd2d99415","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"// Generate a clause that can be used as part of the cypher WHERE clause to only select\n// nodes in the selected region\n//\n// Parameters\n// nodeName (string): The name used to refer to the nodes in the cypher query. Eg: MATCH (j:Junction) would have j as the node name\n//\n// Returns\n// string: The clause that can be used as part of the WHERE\nfunction generateLocationWhere(nodeName) {\n  let lat1 = 0, lat2 = 0, lng1 = 0, lng2 = 0;\n  [lat1, lat2] = [data.positions.lat1, data.positions.lat2].sort((a, b) => a-b);\n  [lng1, lng2] = [data.positions.lng1, data.positions.lng2].sort((a, b) => a-b);\n  \n  return `\n  \t${nodeName}.latitude >= ${lat1} AND ${nodeName}.latitude <= ${lat2} AND\n    ${nodeName}.longitude >= ${lng1} AND ${nodeName}.longitude <= ${lng2}\n  `\n}","pinCode":false,"dname":"83a4c4bb-69f5-4d3a-9f11-cc0d551e3bdc","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"// Determine whether or not a region is currently selected\n//\n// Returns\n// boolean: true if a region is selected, false otherwise\nisRegionSelected = () => data.positions.lat1 != data.positions.lat2 || data.positions.lng1 != data.positions.lng2","pinCode":false,"dname":"e457e116-77d8-45f9-bae8-a13505e58d2c","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"// Load nodes from Neo4j using the given [match] clause\n//\n// If a region is selected then only nodes from that region will be selected,\n// otherwise all nodes that [match] finds will be loaded\n//\n// Parameters\n// match (string): The clause to use for matching nodes in the Cypher query. eg: '(j:Junction)'\n// longitude_limiter (string): The name of the node that will be used to limit to the region. eg: For the above, 'j'\nfunction loadNodes(match, longitude_limiter) {\n  console.log(match);\n  let where = isRegionSelected() ? `WHERE ${generateLocationWhere(longitude_limiter)}` : ''\n    \n  let query = `\n      MATCH ${match}\n      ${where}\n      RETURN * \n    `;\n  console.log(query);\n  api.neo4j(query);\n}","pinCode":false,"dname":"f375d578-4f0e-4c52-8e9d-983857b5cb70","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"// Filter for nodes that are in the region\n//\n// If no region is selected then no filtering is done\n//\n// Returns\n// function (n)->boolean: The function that can be used as a filter on an array of nodes\nfunction filterByRegion() {\n  // Get the region positions in order\n  let lat1 = 0, lat2 = 0, lng1 = 0, lng2 = 0;\n  [lat1, lat2] = [data.positions.lat1, data.positions.lat2].sort((a, b) => a-b);\n  [lng1, lng2] = [data.positions.lng1, data.positions.lng2].sort((a, b) => a-b);\n  \n  let hasRegion = isRegionSelected();\n  \n  return (node) => {\n    if (!hasRegion) return true;\n    let latidude = node.properties.latitude;\n    let longitude = node.properties.longitude;\n    return latidude >= lat1 && latidude <= lat2 &&\n      longitude >= lng1 && longitude <= lng2;\n  }\n}","pinCode":false,"dname":"f554d9c8-04c4-4115-8f84-ad41399d4a6b","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"// Filter for nodes that are selected\n//\n// Returns\n// function (n)->boolean: The function that can be used as a filter on an array of nodes\nfunction filterBySelection() { return (n => n.getStyle('selected')) }","pinCode":false,"dname":"d1125855-668d-40aa-b07f-a0c134b5d094","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"select = {\n  let select = yield htl.html`<select class=\"btn btn-secondary dropdown-toggle customBtn\"></select>`;\n  \n  let categories = [\n  \t\"Junction\",\n    \"Segment\",\n    \"Crime\",\n    \"Transit\",\n    \"RapidTransit\",\n    \"Store\",\n    \"School\"\n  ]\n  \n  let category = \"\"\n  for (category of categories) {\n    select.appendChild((htl.html`<option value=${category}>${category}</option>`));\n  }\n  \n  data.select = select\n}","pinCode":false,"dname":"81df8960-4963-477d-961f-6feea9c45ea3","codeMode":"javascript2","hide":true}}},{"type":"codeTool","data":{"codeData":{"value":"// A handy button for development that makes the Grove and GraphXR APIs availiable in the inspector\nGrove.Button({\n  label: \"Make APIs Visible\",\n  onClick: () => {\n    window.Grove = Grove;\n    window.api = api;\n    window.htl = htl;\n  }\n})","pinCode":false,"dname":"5c3918b8-f6b0-4c1d-83eb-14044647c032","codeMode":"javascript2","hide":true}}}],"version":"2.19.1"}